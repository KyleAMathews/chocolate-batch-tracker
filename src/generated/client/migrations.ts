export default [
  {
    "statements": [
      "CREATE TABLE \"chocolate_batches\" (\n  \"id\" TEXT NOT NULL,\n  \"recipe_id\" TEXT,\n  \"bean_origin\" TEXT,\n  \"ingredients\" TEXT_JSON,\n  \"importer\" TEXT,\n  \"production_date\" TEXT,\n  CONSTRAINT \"chocolate_batches_recipe_id_fkey\" FOREIGN KEY (\"recipe_id\") REFERENCES \"recipes\" (\"id\"),\n  CONSTRAINT \"chocolate_batches_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"production_comments\" (\n  \"id\" TEXT NOT NULL,\n  \"batch_id\" TEXT NOT NULL,\n  \"user_id\" TEXT NOT NULL,\n  \"user_name\" TEXT NOT NULL,\n  \"created_at\" TEXT NOT NULL,\n  \"text\" TEXT NOT NULL,\n  \"attachment_path\" TEXT,\n  CONSTRAINT \"production_comments_batch_id_fkey\" FOREIGN KEY (\"batch_id\") REFERENCES \"chocolate_batches\" (\"id\"),\n  CONSTRAINT \"production_comments_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"recipes\" (\n  \"id\" TEXT NOT NULL,\n  \"description\" TEXT NOT NULL,\n  \"name\" TEXT NOT NULL,\n  CONSTRAINT \"recipes_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"recipe_ingredients\" (\n  \"id\" TEXT NOT NULL,\n  \"recipe_id\" TEXT NOT NULL,\n  \"name\" TEXT NOT NULL,\n  \"percentage\" INTEGER NOT NULL,\n  CONSTRAINT \"recipe_ingredients_percentage_check\" CHECK (((\"percentage\" > 0) AND (\"percentage\" <= 100))),\n  CONSTRAINT \"recipe_ingredients_recipe_id_fkey\" FOREIGN KEY (\"recipe_id\") REFERENCES \"recipes\" (\"id\"),\n  CONSTRAINT \"recipe_ingredients_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.chocolate_batches', 1);",
      "  /* Triggers for table chocolate_batches */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_chocolate_batches_primarykey;",
      "CREATE TRIGGER update_ensure_main_chocolate_batches_primarykey\n  BEFORE UPDATE ON \"main\".\"chocolate_batches\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_chocolate_batches_into_oplog;",
      "CREATE TRIGGER insert_main_chocolate_batches_into_oplog\n   AFTER INSERT ON \"main\".\"chocolate_batches\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.chocolate_batches')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'chocolate_batches', 'INSERT', json_object('id', new.\"id\"), json_object('bean_origin', new.\"bean_origin\", 'id', new.\"id\", 'importer', new.\"importer\", 'ingredients', new.\"ingredients\", 'production_date', new.\"production_date\", 'recipe_id', new.\"recipe_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_chocolate_batches_into_oplog;",
      "CREATE TRIGGER update_main_chocolate_batches_into_oplog\n   AFTER UPDATE ON \"main\".\"chocolate_batches\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.chocolate_batches')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'chocolate_batches', 'UPDATE', json_object('id', new.\"id\"), json_object('bean_origin', new.\"bean_origin\", 'id', new.\"id\", 'importer', new.\"importer\", 'ingredients', new.\"ingredients\", 'production_date', new.\"production_date\", 'recipe_id', new.\"recipe_id\"), json_object('bean_origin', old.\"bean_origin\", 'id', old.\"id\", 'importer', old.\"importer\", 'ingredients', old.\"ingredients\", 'production_date', old.\"production_date\", 'recipe_id', old.\"recipe_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_chocolate_batches_into_oplog;",
      "CREATE TRIGGER delete_main_chocolate_batches_into_oplog\n   AFTER DELETE ON \"main\".\"chocolate_batches\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.chocolate_batches')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'chocolate_batches', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('bean_origin', old.\"bean_origin\", 'id', old.\"id\", 'importer', old.\"importer\", 'ingredients', old.\"ingredients\", 'production_date', old.\"production_date\", 'recipe_id', old.\"recipe_id\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_chocolate_batches_recipe_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_chocolate_batches_recipe_id_into_oplog\n  AFTER INSERT ON \"main\".\"chocolate_batches\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.recipes') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'recipes', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"recipes\" WHERE \"id\" = new.\"recipe_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_chocolate_batches_recipe_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_chocolate_batches_recipe_id_into_oplog\n   AFTER UPDATE ON \"main\".\"chocolate_batches\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.recipes') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'recipes', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"recipes\" WHERE \"id\" = new.\"recipe_id\";\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.production_comments', 1);",
      "  /* Triggers for table production_comments */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_production_comments_primarykey;",
      "CREATE TRIGGER update_ensure_main_production_comments_primarykey\n  BEFORE UPDATE ON \"main\".\"production_comments\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_production_comments_into_oplog;",
      "CREATE TRIGGER insert_main_production_comments_into_oplog\n   AFTER INSERT ON \"main\".\"production_comments\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.production_comments')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'production_comments', 'INSERT', json_object('id', new.\"id\"), json_object('attachment_path', new.\"attachment_path\", 'batch_id', new.\"batch_id\", 'created_at', new.\"created_at\", 'id', new.\"id\", 'text', new.\"text\", 'user_id', new.\"user_id\", 'user_name', new.\"user_name\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_production_comments_into_oplog;",
      "CREATE TRIGGER update_main_production_comments_into_oplog\n   AFTER UPDATE ON \"main\".\"production_comments\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.production_comments')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'production_comments', 'UPDATE', json_object('id', new.\"id\"), json_object('attachment_path', new.\"attachment_path\", 'batch_id', new.\"batch_id\", 'created_at', new.\"created_at\", 'id', new.\"id\", 'text', new.\"text\", 'user_id', new.\"user_id\", 'user_name', new.\"user_name\"), json_object('attachment_path', old.\"attachment_path\", 'batch_id', old.\"batch_id\", 'created_at', old.\"created_at\", 'id', old.\"id\", 'text', old.\"text\", 'user_id', old.\"user_id\", 'user_name', old.\"user_name\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_production_comments_into_oplog;",
      "CREATE TRIGGER delete_main_production_comments_into_oplog\n   AFTER DELETE ON \"main\".\"production_comments\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.production_comments')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'production_comments', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('attachment_path', old.\"attachment_path\", 'batch_id', old.\"batch_id\", 'created_at', old.\"created_at\", 'id', old.\"id\", 'text', old.\"text\", 'user_id', old.\"user_id\", 'user_name', old.\"user_name\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_production_comments_batch_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_production_comments_batch_id_into_oplog\n  AFTER INSERT ON \"main\".\"production_comments\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.chocolate_batches') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'chocolate_batches', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"chocolate_batches\" WHERE \"id\" = new.\"batch_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_production_comments_batch_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_production_comments_batch_id_into_oplog\n   AFTER UPDATE ON \"main\".\"production_comments\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.chocolate_batches') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'chocolate_batches', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"chocolate_batches\" WHERE \"id\" = new.\"batch_id\";\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.recipes', 1);",
      "  /* Triggers for table recipes */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_recipes_primarykey;",
      "CREATE TRIGGER update_ensure_main_recipes_primarykey\n  BEFORE UPDATE ON \"main\".\"recipes\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_recipes_into_oplog;",
      "CREATE TRIGGER insert_main_recipes_into_oplog\n   AFTER INSERT ON \"main\".\"recipes\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.recipes')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'recipes', 'INSERT', json_object('id', new.\"id\"), json_object('description', new.\"description\", 'id', new.\"id\", 'name', new.\"name\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_recipes_into_oplog;",
      "CREATE TRIGGER update_main_recipes_into_oplog\n   AFTER UPDATE ON \"main\".\"recipes\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.recipes')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'recipes', 'UPDATE', json_object('id', new.\"id\"), json_object('description', new.\"description\", 'id', new.\"id\", 'name', new.\"name\"), json_object('description', old.\"description\", 'id', old.\"id\", 'name', old.\"name\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_recipes_into_oplog;",
      "CREATE TRIGGER delete_main_recipes_into_oplog\n   AFTER DELETE ON \"main\".\"recipes\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.recipes')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'recipes', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('description', old.\"description\", 'id', old.\"id\", 'name', old.\"name\"), NULL);\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.recipe_ingredients', 1);",
      "  /* Triggers for table recipe_ingredients */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_recipe_ingredients_primarykey;",
      "CREATE TRIGGER update_ensure_main_recipe_ingredients_primarykey\n  BEFORE UPDATE ON \"main\".\"recipe_ingredients\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_recipe_ingredients_into_oplog;",
      "CREATE TRIGGER insert_main_recipe_ingredients_into_oplog\n   AFTER INSERT ON \"main\".\"recipe_ingredients\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.recipe_ingredients')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'recipe_ingredients', 'INSERT', json_object('id', new.\"id\"), json_object('id', new.\"id\", 'name', new.\"name\", 'percentage', new.\"percentage\", 'recipe_id', new.\"recipe_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_recipe_ingredients_into_oplog;",
      "CREATE TRIGGER update_main_recipe_ingredients_into_oplog\n   AFTER UPDATE ON \"main\".\"recipe_ingredients\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.recipe_ingredients')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'recipe_ingredients', 'UPDATE', json_object('id', new.\"id\"), json_object('id', new.\"id\", 'name', new.\"name\", 'percentage', new.\"percentage\", 'recipe_id', new.\"recipe_id\"), json_object('id', old.\"id\", 'name', old.\"name\", 'percentage', old.\"percentage\", 'recipe_id', old.\"recipe_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_recipe_ingredients_into_oplog;",
      "CREATE TRIGGER delete_main_recipe_ingredients_into_oplog\n   AFTER DELETE ON \"main\".\"recipe_ingredients\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.recipe_ingredients')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'recipe_ingredients', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('id', old.\"id\", 'name', old.\"name\", 'percentage', old.\"percentage\", 'recipe_id', old.\"recipe_id\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_recipe_ingredients_recipe_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_recipe_ingredients_recipe_id_into_oplog\n  AFTER INSERT ON \"main\".\"recipe_ingredients\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.recipes') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'recipes', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"recipes\" WHERE \"id\" = new.\"recipe_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_recipe_ingredients_recipe_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_recipe_ingredients_recipe_id_into_oplog\n   AFTER UPDATE ON \"main\".\"recipe_ingredients\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.recipes') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'recipes', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"recipes\" WHERE \"id\" = new.\"recipe_id\";\nEND;"
    ],
    "version": "1"
  }
]